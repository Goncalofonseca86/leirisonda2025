// REMOVE SIDEBAR SECTIONS - Remove se√ß√µes Administra√ß√£o e Diagn√≥stico do sidebar

console.log("üóëÔ∏è SIDEBAR: Removendo se√ß√µes desnecess√°rias do sidebar...");

(function () {
  "use strict";

  // Injetar CSS para esconder elementos permanentemente
  function injectHidingCSS() {
    const cssRules = `
      /* Hide diagnostic and administration sections */
      span.text-xs.font-semibold.text-gray-400.uppercase.tracking-wider {
        display: block !important;
      }

      /* Hide specific text content */
      *:not(script):not(style) {
        /* This will be handled by JavaScript since CSS can't select by text content */
      }

      /* Force hide elements with specific attributes */
      [data-testid*="diagnostic"],
      [data-testid*="administration"],
      [data-loc*="diagnostic"],
      [data-loc*="administration"],
      [class*="diagnostic"],
      [class*="administration"] {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        overflow: hidden !important;
      }

      /* Hide elements that were marked as hidden by our script */
      [hidden="true"] {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        overflow: hidden !important;
      }

      /* Prevent any visibility restoration */
      .sidebar-hidden-element {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        max-height: 0 !important;
        overflow: hidden !important;
      }
    `;

    const style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML = cssRules;
    style.id = "sidebar-hiding-styles";

    // Add to head
    if (document.head) {
      document.head.appendChild(style);
      console.log("üóëÔ∏è SIDEBAR: CSS de oculta√ß√£o injetado");
    } else {
      // Fallback - add to body if head not available
      document.addEventListener("DOMContentLoaded", () => {
        if (document.head) {
          document.head.appendChild(style);
          console.log("üóëÔ∏è SIDEBAR: CSS de oculta√ß√£o injetado (fallback)");
        }
      });
    }
  }

  // Fun√ß√£o para remover se√ß√µes espec√≠ficas
  function removeSidebarSections() {
    let removedSections = 0;

    // Procurar por spans espec√≠ficos com as classes do sidebar compilado
    const targetSpans = document.querySelectorAll(
      "span.text-xs.font-semibold.text-gray-400.uppercase.tracking-wider",
    );

    for (const span of targetSpans) {
      const textContent = span.textContent?.trim();

      if (textContent === "Diagn√≥stico" || textContent === "Administra√ß√£o") {
        console.log(`üóëÔ∏è SIDEBAR: Encontrado span "${textContent}"`);

        // Encontrar o container pai mais adequado (div que cont√©m toda a se√ß√£o)
        let sectionContainer = span;

        // Subir na hierarquia DOM para encontrar o container completo da se√ß√£o
        for (let i = 0; i < 15; i++) {
          sectionContainer = sectionContainer.parentElement;
          if (!sectionContainer) break;

          // Procurar por um container que seja uma se√ß√£o completa do sidebar
          if (
            sectionContainer.tagName === "DIV" &&
            (sectionContainer.children.length >= 2 ||
              sectionContainer.querySelector("nav") ||
              sectionContainer.querySelector("ul") ||
              sectionContainer.classList.contains("space-y-2") ||
              sectionContainer.classList.contains("space-y-1"))
          ) {
            console.log(
              `üóëÔ∏è SIDEBAR: Removendo se√ß√£o completa "${textContent}"`,
            );
            sectionContainer.style.display = "none !important";
            sectionContainer.style.visibility = "hidden !important";
            sectionContainer.style.height = "0 !important";
            sectionContainer.style.overflow = "hidden !important";
            sectionContainer.style.opacity = "0 !important";
            sectionContainer.style.maxHeight = "0 !important";
            sectionContainer.setAttribute("hidden", "true");
            sectionContainer.setAttribute("aria-hidden", "true");
            sectionContainer.classList.add("sidebar-hidden-element");
            removedSections++;
            break;
          }
        }
      }
    }

    // Procurar por elementos que contenham "Diagn√≥stico" ou "Administra√ß√£o" em qualquer lugar
    const allElements = document.querySelectorAll("*");

    for (const element of allElements) {
      const textContent = element.textContent?.trim();

      if (textContent === "Diagn√≥stico" || textContent === "Administra√ß√£o") {
        // Encontrar o container pai que provavelmente cont√©m toda a se√ß√£o
        let sectionContainer = element;

        // Subir na hierarquia DOM para encontrar o container da se√ß√£o
        for (let i = 0; i < 10; i++) {
          sectionContainer = sectionContainer.parentElement;
          if (!sectionContainer) break;

          // Se encontrarmos um container que parece ser uma se√ß√£o completa
          if (
            sectionContainer.querySelector("button") ||
            sectionContainer.classList.contains("space-y-") ||
            sectionContainer.children.length > 2
          ) {
            console.log(`üóëÔ∏è SIDEBAR: Removendo se√ß√£o "${textContent}"`);
            sectionContainer.style.display = "none !important";
            sectionContainer.style.visibility = "hidden";
            removedSections++;
            break;
          }
        }
      }
    }

    // Procurar especificamente por texto "Diagn√≥stico de Sincroniza√ß√£o" e similares
    const diagnosticButtons = document.querySelectorAll("button, div, span");
    for (const button of diagnosticButtons) {
      const buttonText = button.textContent?.toLowerCase() || "";

      if (
        buttonText.includes("diagn√≥stico") ||
        buttonText.includes("diagnostic") ||
        buttonText.includes("sync") ||
        buttonText.includes("sincroniza√ß√£o") ||
        buttonText.includes("administra√ß√£o") ||
        buttonText.includes("administration")
      ) {
        console.log(
          `üóëÔ∏è SIDEBAR: Removendo elemento "${button.textContent?.substring(0, 50)}..."`,
        );
        button.style.display = "none !important";
        button.style.visibility = "hidden";
        removedSections++;

        // Tamb√©m esconder elementos pais se necess√°rio
        let parent = button.parentElement;
        for (let i = 0; i < 5; i++) {
          if (!parent) break;
          const parentText = parent.textContent?.toLowerCase() || "";
          if (
            parentText.includes("diagn√≥stico") ||
            parentText.includes("administra√ß√£o")
          ) {
            parent.style.display = "none !important";
            parent.style.visibility = "hidden";
            break;
          }
          parent = parent.parentElement;
        }
      }
    }

    // Procurar por elementos com data-loc que referenciem essas p√°ginas
    const dataLocElements = document.querySelectorAll(
      '[data-loc*="Diagnostic"], [data-loc*="Administration"]',
    );
    for (const element of dataLocElements) {
      console.log(
        `üóëÔ∏è SIDEBAR: Removendo elemento com data-loc "${element.getAttribute("data-loc")}"`,
      );
      element.style.display = "none !important";
      element.style.visibility = "hidden";
      removedSections++;
    }

    // Procurar por links espec√≠ficos
    const links = document.querySelectorAll(
      'a[href*="diagnostic"], a[href*="administration"], a[href*="sync"]',
    );
    for (const link of links) {
      console.log(`üóëÔ∏è SIDEBAR: Removendo link "${link.href}"`);
      link.style.display = "none !important";
      link.style.visibility = "hidden";
      removedSections++;
    }

    return removedSections;
  }

  // Fun√ß√£o para remover se√ß√µes por seletor CSS mais espec√≠fico
  function removeByCSS() {
    let removed = 0;

    // Procurar especificamente por elementos com as classes exatas do React compilado
    const reactElements = document.querySelectorAll(
      "div, span, button, nav, ul, li",
    );

    for (const element of reactElements) {
      const text = element.textContent?.toLowerCase() || "";
      const exactText = element.textContent?.trim() || "";

      // Remover elementos que contenham exatamente os textos problem√°ticos
      if (
        exactText === "Diagn√≥stico" ||
        exactText === "Administra√ß√£o" ||
        exactText === "Diagn√≥stico de Sincroniza√ß√£o" ||
        text.includes("diagn√≥stico de emerg√™ncia") ||
        text.includes("diagn√≥stico do sistema")
      ) {
        console.log(`üóëÔ∏è SIDEBAR: Removendo elemento exato "${exactText}"`);

        // Aplicar m√∫ltiplas estrat√©gias de oculta√ß√£o
        element.style.display = "none !important";
        element.style.visibility = "hidden !important";
        element.style.opacity = "0 !important";
        element.style.height = "0 !important";
        element.style.overflow = "hidden !important";
        element.style.maxHeight = "0 !important";
        element.setAttribute("hidden", "true");

        // Tamb√©m esconder containers pais que possam ser se√ß√µes completas
        let parent = element.parentElement;
        for (let i = 0; i < 8; i++) {
          if (!parent) break;

          const parentText = parent.textContent?.toLowerCase() || "";
          const parentExactText = parent.textContent?.trim() || "";

          // Se o pai cont√©m apenas este elemento problem√°tico, esconder o pai tamb√©m
          if (
            parent.children.length <= 3 &&
            (parentText.includes("diagn√≥stico") ||
              parentText.includes("administra√ß√£o")) &&
            !parentText.includes("configura√ß√µes") &&
            !parentText.includes("obras") &&
            !parentText.includes("utilizadores")
          ) {
            console.log(
              `üóëÔ∏è SIDEBAR: Removendo container pai "${parentExactText.substring(0, 50)}..."`,
            );
            parent.style.display = "none !important";
            parent.style.visibility = "hidden !important";
            parent.style.opacity = "0 !important";
            parent.style.height = "0 !important";
            parent.style.overflow = "hidden !important";
            parent.setAttribute("hidden", "true");
            removed++;
            break;
          }

          parent = parent.parentElement;
        }

        removed++;
      }

      // Procurar por elementos que contenham texto problem√°tico mas n√£o configura√ß√µes
      else if (
        (text.includes("diagn√≥stico") || text.includes("administra√ß√£o")) &&
        !text.includes("configura√ß√µes") &&
        !text.includes("obras") &&
        !text.includes("utilizadores") &&
        !text.includes("notifica√ß√µes")
      ) {
        // Se √© um elemento pequeno (provavelmente s√≥ texto), esconder o pai
        if (
          element.children.length === 0 &&
          element.textContent?.trim().length < 80
        ) {
          let parent = element.parentElement;
          for (let i = 0; i < 6; i++) {
            if (!parent) break;

            const parentChildren = parent.children.length;
            const parentText = parent.textContent?.toLowerCase() || "";

            if (
              parent.tagName === "DIV" &&
              parentChildren >= 1 &&
              parentChildren <= 5 &&
              (parentText.includes("diagn√≥stico") ||
                parentText.includes("administra√ß√£o"))
            ) {
              console.log(
                `üóëÔ∏è SIDEBAR: Removendo container pai de "${element.textContent?.substring(0, 30)}..."`,
              );
              parent.style.display = "none !important";
              parent.style.visibility = "hidden !important";
              parent.style.opacity = "0 !important";
              parent.style.height = "0 !important";
              parent.style.overflow = "hidden !important";
              parent.setAttribute("hidden", "true");
              removed++;
              break;
            }
            parent = parent.parentElement;
          }
        } else {
          console.log(
            `üóëÔ∏è SIDEBAR: Removendo elemento "${element.textContent?.substring(0, 50)}..."`,
          );
          element.style.display = "none !important";
          element.style.visibility = "hidden !important";
          element.style.opacity = "0 !important";
          element.style.height = "0 !important";
          element.style.overflow = "hidden !important";
          element.setAttribute("hidden", "true");
          removed++;
        }
      }
    }

    return removed;
  }

  // Fun√ß√£o mais agressiva - remover por posi√ß√£o no sidebar
  function removeByPosition() {
    // Procurar pelo sidebar com m√∫ltiplas estrat√©gias
    const sidebarSelectors = [
      '[data-loc*="Sidebar"]',
      "nav",
      ".sidebar",
      '[class*="sidebar"]',
      "aside",
      '[role="navigation"]',
    ];

    for (const selector of sidebarSelectors) {
      const sidebarElements = document.querySelectorAll(selector);

      for (const sidebar of sidebarElements) {
        // Procurar por se√ß√µes que contenham os termos problem√°ticos
        const sections = sidebar.querySelectorAll("div, section, ul, li, nav");

        for (const section of sections) {
          const sectionText = section.textContent?.toLowerCase() || "";
          const exactText = section.textContent?.trim() || "";

          if (
            exactText === "Diagn√≥stico" ||
            exactText === "Administra√ß√£o" ||
            (sectionText.includes("diagn√≥stico") &&
              !sectionText.includes("configura√ß√µes")) ||
            (sectionText.includes("administra√ß√£o") &&
              !sectionText.includes("configura√ß√µes"))
          ) {
            console.log(`üóëÔ∏è SIDEBAR: Removendo se√ß√£o completa no sidebar`);
            section.style.display = "none !important";
            section.style.visibility = "hidden !important";
            section.style.opacity = "0 !important";
            section.style.height = "0 !important";
            section.style.overflow = "hidden !important";
            section.setAttribute("hidden", "true");
          }
        }
      }
    }
  }

  // Fun√ß√£o especial para remover elementos React renderizados
  function removeReactElements() {
    // Procurar por elementos React com textContent espec√≠fico
    const walker = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_ELEMENT,
      {
        acceptNode: function (node) {
          const text = node.textContent?.trim() || "";
          if (
            text === "Diagn√≥stico" ||
            text === "Administra√ß√£o" ||
            text === "Diagn√≥stico de Sincroniza√ß√£o" ||
            text.includes("Diagn√≥stico de Emerg√™ncia") ||
            text.includes("Diagn√≥stico do Sistema")
          ) {
            return NodeFilter.FILTER_ACCEPT;
          }
          return NodeFilter.FILTER_REJECT;
        },
      },
    );

    const elementsToRemove = [];
    let node;
    while ((node = walker.nextNode())) {
      elementsToRemove.push(node);
    }

    for (const element of elementsToRemove) {
      console.log(
        `üóëÔ∏è SIDEBAR: Removendo elemento React "${element.textContent?.substring(0, 50)}..."`,
      );

      // M√∫ltiplas estrat√©gias de remo√ß√£o
      element.style.display = "none !important";
      element.style.visibility = "hidden !important";
      element.style.opacity = "0 !important";
      element.style.height = "0 !important";
      element.style.maxHeight = "0 !important";
      element.style.overflow = "hidden !important";
      element.setAttribute("hidden", "true");
      element.setAttribute("aria-hidden", "true");

      // Tentar remover do DOM se poss√≠vel
      try {
        element.remove();
      } catch (e) {
        // Se n√£o conseguir remover, pelo menos esconder completamente
        element.innerHTML = "";
      }
    }
  }

  // Remover estilos inline que possam restaurar visibilidade
  function ensureHidden() {
    const problemTexts = [
      "diagn√≥stico",
      "administra√ß√£o",
      "diagnostic",
      "administration",
    ];

    const allElements = document.querySelectorAll("*");
    for (const element of allElements) {
      const text = element.textContent?.toLowerCase() || "";

      for (const problemText of problemTexts) {
        if (text.includes(problemText) && !text.includes("configura√ß√µes")) {
          element.style.display = "none !important";
          element.style.visibility = "hidden !important";
          element.style.opacity = "0 !important";
          element.style.height = "0 !important";
          element.style.maxHeight = "0 !important";
          element.style.overflow = "hidden !important";
          element.setAttribute("hidden", "true");
          element.setAttribute("aria-hidden", "true");
          break;
        }
      }
    }
  }

  // Executar remo√ß√£o
  function executeRemoval() {
    try {
      console.log("üóëÔ∏è SIDEBAR: Executando remo√ß√£o completa...");

      const removed1 = removeSidebarSections();
      const removed2 = removeByCSS();
      removeByPosition();
      removeReactElements();
      ensureHidden();

      const totalRemoved = removed1 + removed2;

      if (totalRemoved > 0) {
        console.log(
          `‚úÖ SIDEBAR: ${totalRemoved} elementos removidos com sucesso`,
        );
      } else {
        console.log(
          `‚ö†Ô∏è SIDEBAR: Nenhum elemento encontrado para remover nesta execu√ß√£o`,
        );
      }

      // Verificar se ainda existem elementos problem√°ticos
      const remainingProblems = document.querySelectorAll("*");
      let foundRemaining = false;

      for (const element of remainingProblems) {
        const text = element.textContent?.trim() || "";
        if (
          (text === "Diagn√≥stico" || text === "Administra√ß√£o") &&
          element.style.display !== "none"
        ) {
          console.log(`‚ö†Ô∏è SIDEBAR: Ainda existe elemento vis√≠vel: "${text}"`);
          foundRemaining = true;
          // For√ßa remo√ß√£o adicional
          element.style.display = "none !important";
          element.style.visibility = "hidden !important";
          element.setAttribute("hidden", "true");
        }
      }

      if (!foundRemaining) {
        console.log(
          "‚úÖ SIDEBAR: Verifica√ß√£o completa - nenhum elemento problem√°tico encontrado",
        );
      }
    } catch (error) {
      console.error("‚ùå SIDEBAR: Erro ao remover se√ß√µes:", error);
    }
  }

  // Executar m√∫ltiplas vezes para garantir remo√ß√£o
  function scheduleRemoval() {
    console.log("üóëÔ∏è SIDEBAR: Iniciando agendamento de remo√ß√£o...");

    // Executar imediatamente
    executeRemoval();

    // Executar ap√≥s 1 segundo (para elementos carregados dinamicamente)
    setTimeout(executeRemoval, 1000);

    // Executar ap√≥s 3 segundos
    setTimeout(executeRemoval, 3000);

    // Executar ap√≥s 5 segundos
    setTimeout(executeRemoval, 5000);

    // Executar ap√≥s 10 segundos
    setTimeout(executeRemoval, 10000);

    // Monitor cont√≠nuo mais frequente por 60 segundos
    const monitor = setInterval(() => {
      executeRemoval();
    }, 2000);

    // Monitor adicional de baixa frequ√™ncia por mais tempo
    const longTermMonitor = setInterval(() => {
      executeRemoval();
    }, 10000);

    setTimeout(() => {
      clearInterval(monitor);
      console.log("üóëÔ∏è SIDEBAR: Monitor intensivo finalizado");
    }, 60000);

    setTimeout(() => {
      clearInterval(longTermMonitor);
      console.log("üóëÔ∏è SIDEBAR: Monitor de longo prazo finalizado");
    }, 300000); // 5 minutos
  }

  // Observador de muta√ß√µes para elementos que s√£o adicionados dinamicamente
  function setupMutationObserver() {
    const observer = new MutationObserver((mutations) => {
      let shouldCheck = false;

      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const text = node.textContent?.toLowerCase() || "";
              if (
                text.includes("diagn√≥stico") ||
                text.includes("administra√ß√£o")
              ) {
                shouldCheck = true;
              }
            }
          });
        }
      });

      if (shouldCheck) {
        console.log(
          "üóëÔ∏è SIDEBAR: Elemento problem√°tico detectado via mutation observer",
        );
        setTimeout(executeRemoval, 100);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    // Parar observa√ß√£o ap√≥s 10 minutos
    setTimeout(() => {
      observer.disconnect();
      console.log("üóëÔ∏è SIDEBAR: Mutation observer desconectado");
    }, 600000);
  }

  // Aguardar DOM estar pronto
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      scheduleRemoval();
      setupMutationObserver();
    });
  } else {
    // Aguardar um pouco para a aplica√ß√£o carregar
    setTimeout(() => {
      scheduleRemoval();
      setupMutationObserver();
    }, 500);
  }

  console.log("üóëÔ∏è SIDEBAR: Sistema de remo√ß√£o avan√ßado iniciado");
})();
